#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
LOGGER_FLAGS=""

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

# Output npm debug info on error
trap cat_npm_debug_log ERR

# START: image library
echo "-----> Install libjpeg62"
VENDOR_DIR="vendor"
DOWNLOAD_URL="https://raw.githubusercontent.com/amstatz/styleguide/gh-pages/data/lib/libjpeg62.tar.gz"

echo "DOWNLOAD_URL = " $DOWNLOAD_URL | indent

cd $BUILD_DIR
mkdir -p $VENDOR_DIR
cd $VENDOR_DIR
curl -L --silent $DOWNLOAD_URL | tar xz

echo "exporting PATH and LIBRARY_PATH" | indent
PROFILE_PATH="$BUILD_DIR/.profile.d/libjpeg62.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="$PATH:$HOME/vendor/libjpeg62/bin"' >> $PROFILE_PATH
echo 'export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/vendor/libjpeg62/lib"' >> $PROFILE_PATH

# END: image library

# Resolve node version using semver.io
node_version="0.10.31"

# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
# node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
node_url="https://nodejs.org/dist/v0.10.31/node-v0.10.31.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
# mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
mv $BUILD_DIR/node-v$node_version $BUILD_DIR/vendor/node
# chmod +x $BUILD_DIR/vendor/node/bin/*
chmod +x $BUILD_DIR/vendor/node-v$node_version/bin/*
PATH=$BUILD_DIR/vendor/node/bin:$PATH

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/java

KEEP_M2_CACHE="true"

# create default system.properties for apps that had the jdk vendored in 
if [ -f ${CACHE_DIR}/.jdk/vendor ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

if [ -f ${CACHE_DIR}/system.properties ] && [ ! -f ${BUILD_DIR}/system.properties ]; then
  cp ${CACHE_DIR}/system.properties ${BUILD_DIR}/system.properties
fi

if [ ! -d $CACHE_DIR ]; then
  LOGGER_FLAGS="$LOGGER_FLAGS new_java_app"
  logger -p user.notice -t "slugc[$$]" "language_pack_java new_java_app"
  KEEP_M2_CACHE="false"
  if [ ! -f ${BUILD_DIR}/system.properties ]; then 
    echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties; 
  fi
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java retain_m2_repo"
fi

mkdir -p $BUILD_DIR/.startup
cat << EOF > $BUILD_DIR/.startup/java_with_jstack
  javacmd="java \$@"
  eval "\$javacmd &"
  pid=\$!

  while :
  do
    sleep 180
    kill -3 \$pid
  done
EOF
chmod +x $BUILD_DIR/.startup/java_with_jstack

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# install JDK 
if [ -f ${BUILD_DIR}/system.properties ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_java download_jdk"
  LOGGER_FLAGS="$LOGGER_FLAGS download_jdk"
  javaVersion=$(detect_java_version ${BUILD_DIR})
  echo -n "-----> Installing OpenJDK ${javaVersion}..."
  install_java ${BUILD_DIR} ${javaVersion}
  echo "done"
  cp ${BUILD_DIR}/system.properties ${CACHE_DIR}/
fi

# change to cache dir to install maven
cd $CACHE_DIR

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/maven.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven 3.0.3..."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml 
fi

if [ -e ${ENV_DIR}/MAVEN_SETTINGS_URL ]; then
  export "MAVEN_SETTINGS_URL=$(cat ${ENV_DIR}/MAVEN_SETTINGS_URL)"
fi

echo "reading MAVEN_SETTINGS_URL from ${MAVEN_SETTINGS_URL}"

if [ -n "$MAVEN_SETTINGS_PATH" ]; then
  MAVEN_SETTINGS_OPT="-s $MAVEN_SETTINGS_PATH"
elif [ -n "$MAVEN_SETTINGS_URL" ]; then
  echo -n "-----> Installing settings.xml..."
  mkdir -p .m2
  curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
  echo " done"
  MAVEN_SETTINGS_OPT="-s $CACHE_DIR/.m2/settings.xml"
elif [ -f $BUILD_DIR/settings.xml ]; then
  MAVEN_SETTINGS_OPT="-s $BUILD_DIR/settings.xml"
else
  unset MAVEN_SETTINGS_OPT
fi

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx1024m"

if [ -e ${ENV_DIR}/ENVIRONMENT ]; then
  export "ENVIRONMENT=$(cat ${ENV_DIR}/ENVIRONMENT)"
fi

echo "ENVIRONMENT ${ENVIRONMENT} building now..."

whitelist_regex=${2:-''}
blacklist_regex=${3:-'^(PATH|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
if [ -d "$ENV_DIR" ]; then
  echo " d env dir ${ENV_DIR} now"
  for e in $(ls $ENV_DIR); do
    echo " d env dir $e a"
    echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
    export "$e=$(cat $ENV_DIR/$e)"
    :
  done
fi


echo "ENVIRONMENT ${ENVIRONMENT} building now!"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository $MAVEN_SETTINGS_OPT -DskipTests=true clean install -Paws,$ENVIRONMENT"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi

logger -p user.notice -t "slugc[$$]" "language_pack_java java_compile_end $LOGGER_FLAGS"
